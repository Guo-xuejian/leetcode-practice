// 剑指 Offer 14- II. 剪绳子 II
// 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

// 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

// 示例 1：

// 输入: 2
// 输出: 1
// 解释: 2 = 1 + 1, 1 × 1 = 1
// 示例 2:

// 输入: 10
// 输出: 36
// 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36

// 提示：

// 2 <= n <= 1000

func cuttingRope(n int) int {
	if n <= 3 {
		// 因为题目要求必须要剪>1段
		return n - 1
	}
	var b = n % 3
	var p = 1000000007
	var rem = 1
	// n = 3a+b, 对 x ^ (a-1) 循环求余
	for a := 1; a <= n/3-1; a++ {
		rem = (rem * 3) % p
	}
	if b == 0 {
		// 直接 补上最后一个3 即可
		return rem * 3 % p
	}
	if b == 1 {
		// 最后一个3+1 替换成 2 * 2
		return rem * 4 % p
	}
	// if b== 2, 3 * 2
	return rem * 6 % p
}
 